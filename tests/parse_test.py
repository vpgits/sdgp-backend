import pytest
from celery_workers.src.api.parse import read_pdf
from celery_workers.src.api.parse import read_docx
from celery_workers.src.api.parse import read_pptx

def test_read_pdf():
    result = read_pdf('../tests/test.pdf')
    print(result)
    assert ['Software Requirements for 5SENG001W 1 Software development For the tutorial exercises, you will need to implement various algorithms. We will usually provide a skeleton which provides things like a main function or ﬁle I/O. The exercises can be completed using either Java or C++. For this you will need a suitable development environment, which could be • An IDE such as Netbeans or Visual Studio • A regular text editor plus compiler suite (e.g. JDK or gcc) The computers in the labs will have Netbeans and Visual Studio installed; if you want to move projects between them and your own computer, using the same environment is going to be helpful. Both are available for free: • Netbeans downloads • Visual Studio downloads (I recommend sticking with the 2019 version for now) For the coursework, you will only be expected to submit a short report and some source code (.java ﬁles or .cpp and .h ﬁles, respectively), so your choice of environment should make no diﬀerence. 2 Other software In order to write your coursework report, some tool that lets you create pdf documents (like MS word or LaTeX) will be needed. You will also need to be able to draw some simple diagrams (graphs or trees). I recommend using the diagrams.net app (previously known as draw.io). 1 '] == result

def test_read_pdf_fail():
    with pytest.raises(Exception):
        read_pdf('../tests/test.txt')

def test_read_docx():
    result = read_docx('../tests/test.docx')
    print(result)
    assert['5COSC022W.2 Client Server Architectures', 'Tutorial Week 03: Socket Programming', 'Exercise 1: Building Basic Client-Server Communication in Java', 'Objective:\xa0The goal of this exercise is to understand the fundamentals of network programming in Java by creating simple client and server classes. You will learn how to establish a connection, send messages, and receive responses using sockets.', 'Overview:\xa0In this exercise, you will be creating two separate classes -\xa0Client\xa0and\xa0Server. The\xa0Client\xa0class will connect to the\xa0Server\xa0class using a specific port. Once the connection is established, the\xa0Client\xa0will send a message to the\xa0Server, which will then respond back to the\xa0Client.', 'Key Concepts:', 'Sockets:\xa0A socket is one endpoint of a two-way communication link between two programs running on the network. You will use the\xa0Socket\xa0class for the client and the\xa0ServerSocket\xa0class for the server.', 'Input/Output Streams:\xa0These are used for communication between the client and server. You will use the\xa0InputStreamReader\xa0and\xa0BufferedReader\xa0classes for reading data, and the\xa0PrintWriter\xa0class for writing data.', 'Exception Handling:\xa0Network operations can fail for various reasons, so it’s important to handle exceptions properly in your code. You will use a try-catch block to catch any\xa0IOException\xa0that may occur.', 'Expected Outcome:\xa0By the end of this exercise, you should be able to create a simple client-server application in Java. You will gain a basic understanding of network programming, and be prepared to explore more complex topics like multi-threading and non-blocking I/O.', 'Steps:', 'Download the Project Zip File:', 'Log in to your Blackboard account.', 'Click on the ‘Week 3’ section.', 'Find the file named\xa0Tutorial_week03_1_Questions.zip.', 'Click on the file name to download it.', 'Extract the Zip File:', 'Locate the downloaded zip file on your computer. It’s usually in the ‘Downloads’ folder unless you chose a different location. You may also you the ZIP file to import it directly to the NetBeans without requiring extracting the ZIP file. ', 'Right-click on the zip file and select ‘Extract All…’.', 'Choose a suitable location on your computer to extract the files.', 'Open NetBeans IDE:', 'Launch the NetBeans IDE 18 or above on your computer.', 'Import the Project:', 'In NetBeans, click on ‘File’ in the menu bar, then select ‘Open Project’.', 'In the file chooser window, navigate to the location where you extracted the project files.', 'You should see a folder with the same name as the zip file. Click on it to select it.', 'Click on the ‘Open Project’ button.', 'Explore the Project:', 'The project should now be visible in the ‘Projects’ tab on the left side of the IDE.', 'Click on the project name to expand it and explore its structure.', 'Implement Your Code:', 'Now, you can start implementing your code under each comment in the provided classes.', '', ' Exercise 2: Building a Simple Chat Application in Java', 'Objective:\xa0The goal of this exercise is to understand the fundamentals of network programming in Java by creating simple chat client and server classes. You will learn how to establish a connection, send messages, and receive responses using sockets.', 'Overview:\xa0In this exercise, you will be creating two separate classes - SimpleChatClient and SimpleChatServer. The SimpleChatClient class will connect to the SimpleChatServer class using a specific port. Once the connection is established, the SimpleChatClient will send a message to the SimpleChatServer, which will then respond back to the SimpleChatClient.', 'Key Concepts:', 'Sockets:\xa0A socket is one endpoint of a two-way communication link between two programs running on the network. You will use the\xa0Socket\xa0class for the client and the\xa0ServerSocket\xa0class for the server.', 'Input/Output Streams:\xa0These are used for communication between the client and server. You will use the\xa0InputStream\xa0and\xa0OutputStream\xa0classes for reading data and writing data.', 'Exception Handling:\xa0Network operations can fail for various reasons, so it’s important to handle exceptions properly in your code. You will use a try-catch block to catch any\xa0IOException\xa0that may occur.', 'Expected Outcome:\xa0By the end of this exercise, you should be able to create a simple chat application in Java. You will gain a basic understanding of network programming, and be prepared to explore more complex topics like multi-threading and non-blocking I/O.', '', 'Steps:', 'Download the Project Zip File:', 'Log in to your Blackboard account.', 'Click on the ‘Week 3’ section.', 'Find the file named\xa0Tutorial_week03_2_Questions.zip.', 'Click on the file name to download it.', 'Extract the Zip File:', 'Locate the downloaded zip file on your computer. It’s usually in the ‘Downloads’ folder unless you chose a different location. You may also you the ZIP file to import it directly to the NetBeans without requiring extracting the ZIP file. ', 'Right-click on the zip file and select ‘Extract All…’.', 'Choose a suitable location on your computer to extract the files.', 'Open NetBeans IDE:', 'Launch the NetBeans IDE on your computer.', 'Import the Project:', 'In NetBeans, click on ‘File’ in the menu bar, then select ‘Open Project’.', 'In the file chooser window, navigate to the location where you extracted the project files.', 'You should see a folder with the same name as the zip file. Click on it to select it.', 'Click on the ‘Open Project’ button.', 'Explore the Project:', 'The project should now be visible in the ‘Projects’ tab on the left side of the IDE.', 'Click on the project name to expand it and explore its structure.', 'Implement Your Code:', 'Now, you can start implementing your code under each comment in the provided classes.', '', '', '']== result

def test_read_docx_fail():
    with pytest.raises(Exception):
        read_docx('../tests/test.txt')

def test_read_pptx():
    result = read_pptx('../tests/test.pptx')
    print(result)
    assert['', '', '', 'What Are Web Services?', '', 'What are web services?', '', 'Example: Online Store Payments ', '', '', '', '', 'Benefits of Web Services', 'Characteristics of Web Services', '', 'Standardization', 'How Does Serialization Work?', 'Standardization', 'Interoperability', 'Example - interoperability ', 'Discoverability', "Let's consider a scenario where discoverability plays a crucial role in web services", 'Solutions for discoverability', 'Web service architecture', '', 'Web Service Architecture – Service Oriented ', '', '', '', '', '', '', 'Web Service Stack ', '', '', '', '', 'SOAP-based Web Services', '', 'Protocol Specifications\x0b', 'XML', "XML-based:\xa0SOAP messages are structured XML documents. This makes them platform-independent and human-readable (though slightly verbose).\nEnvelope Structure:\xa0SOAP messages have a specific structure. They always include an 'Envelope' element which contains a 'Header' (optional) and a 'Body'.\nHeader:\xa0Can carry extra information like security metadata, routing, or transaction details.\nBody:\xa0Contains the actual message payload (e.g., information about a function call and its parameters).", '<?xml version="1.0" encoding="UTF-8"?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don\'t forget me this weekend!</body>\n</note>', 'XML-Based Format for Message Structure\x0b', 'XML (eXtensible Markup Language)\nPlatform-independent and human-readable.\nUsed to define the structure of SOAP messages.\n', '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:m="http://www.example.org">\n   <soap:Header>\n      <!-- Header content here -->\n   </soap:Header>\n   <soap:Body>\n      <!-- Body content here -->\n   </soap:Body>\n</soap:Envelope>', 'SOAP', 'WSDL', 'WSDL', '', '', 'RESTful Web Services', '', '', '', 'Introduction to RESTful Services\x0b', '', '', '', 'Purpose of RESTful Services in Modern Web Development\x0b', '', 'Principles of REST - Stateless Communication', '', '', '', 'Principles of REST - Client-Server Architecture', 'Principles of REST - Uniform Interface', 'Principles of REST - Uniform Interface', 'The core architectural elements of a RESTful system - URI', 'A URI is a string of characters used to identify a resource over the Web. \nThe client uses a URI to locate the resources over Web and then, sends a request to the server and reads the response.\n', '', '', '', 'Understanding the JSON data syntax', '', 'Understanding the JSON data syntax', '', '', 'Arrays are enclosed in square brackets ([ ]), and their values are separated by a comma (,).\nEach value in an array may be of a different type, including another array or an object.\n', '', '', '', '', '', '', 'Basic data types available with JSON', '', '', '', '', 'The HTTP GET method', '', '', '', '', 'The HTTP POST method', 'The POST method is used to create resources.', '', '', '', '', 'The HTTP PUT method', 'The PUT method is used to update resources. ', '', '', '', '', 'The HTTP DELETE method', 'The Travel Agency App', '\x0b\x0bDesigning the Web Service\x0b\x0b', 'what kind of information the app needs from outside to work?', 'Web service endpoints']==result

def test_read_pptx_fail():
    with pytest.raises(Exception):
        read_pptx('../tests/test.txt')
        