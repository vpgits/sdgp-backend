name: Build and push images to AWS ECR and then deploy to Amazon ECS
permissions:
  id-token: write
  contents: read
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      # Checkout the repository with git lfs set to true to checkout with the model gte/small
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo SUPABASE_URL=${{ secrets.SUPABASE_URL }} >> ./celery_workers/.env
          echo SUPABASE_KEY=${{ secrets.SUPABASE_KEY }} >> ./celery_workers/.env
          echo OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} >> ./celery_workers/.env
          echo SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} >> ./celery_workers/.env
          echo PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} >> ./celery_workers/.env
          echo PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }} >> ./celery_workers/.env
          echo RUNPOD_WORKER_ID=${{ secrets.RUNPOD_WORKER_ID }} >> ./celery_workers/.env
          echo RUNPOD_API_KEY=${{ secrets.RUNPOD_API_KEY }} >> ./celery_workers/.env
          echo RUNPOD_API_SECRET=${{ secrets.RUNPOD_API_KEY }} >> ./celery_workers/.env
          echo BROKER_URL=${{ secrets.BROKER_URL }} >> ./celery_workers/.env
          echo BROKER_URL=${{ secrets.BROKER_URL }} >> ./celery_app/.env
      - name: Download gte/small
        run: |
          apt-get update && apt-get install -y git-lfs
          git lfs install
          git clone https://huggingface.co/thenlper/gte-small ./celery_workers/src/api/gte-small

        # Configure AWS credentials, IAM Identity Center Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME_AWS }}
          aws-region: ${{ vars.AWS_REGION }}
        # Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        # Build, tag, and push docker image to Amazon ECR (web, worker, rabbitmq)
      - name: Build, tag, and push celery worker docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sdgp-backend-worker
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./celery_workers/Dockerfile  .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push fastapi docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sdgp-backend-web
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./fastapi_app/Dockerfile  .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      - name: Build, tag, and push rabbitmq  docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: sdgp-backend-rabbitmq
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./rabbitmq/Dockerfile  .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME_AWS }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update image for sdgp-backend-web
        id: update-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: sdgp-backend-web
          image: ${{ steps.login-ecr.outputs.registry }}/sdgp-backend-web:${{ github.sha }}

      - name: Update image for sdgp-backend-rabbitmq
        id: update-rabbitmq
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.update-web.outputs.task-definition }}
          container-name: sdgp-backend-rabbitmq
          image: ${{ steps.login-ecr.outputs.registry }}/sdgp-backend-rabbitmq:${{ github.sha }}

      - name: Update image for sdgp-backend-worker
        id: update-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.update-rabbitmq.outputs.task-definition }}
          container-name: sdgp-backend-worker
          image: ${{ steps.login-ecr.outputs.registry }}/sdgp-backend-worker:${{ github.sha }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-worker.outputs.task-definition }}
          service: sdgp-backend
          cluster: sdgp-backend
          wait-for-service-stability: true
